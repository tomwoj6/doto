security:
    encoders:
        FOS\UserBundle\Model\UserInterface: bcrypt
        
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt|error)|css|images|js)/
            security: false
        
        main:
            pattern: ^/
            logout:       true
            anonymous:    true
            fp_openid:
                create_user_if_not_exists: true # so createUserFromIdentity method will be called
                provider: openid_user_manager # cf below
                # previously we used 'contact/email' field. So we have to request it!
                # Please note that all OpenID providers may not be able to provide all fields.
                # check the desired provider documentation

#            form_login:
#                default_target_path: /home
#                login_path: /
#                provider: fos_userbundle
#                csrf_provider: security.csrf.token_manager


    providers:
        # the order is important here
        openid_user_manager:
            id: user.openid_user_manager # the name of the service
        # keep your database provider below! it may look like this:
        database:
            entity: { class: UserBundle:User, property: username }
#        fos_userbundle:
#            id: fos_user.user_provider.username

    access_control:
#        - { path: ^/login_openid$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/home, role: IS_AUTHENTICATED_OPENID }
        - { path: ^/$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        